import hashlib
import os
import zipfile
import mimetypes
import datetime

# üí• ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏±‡∏•‡πÅ‡∏ß‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
known_malware = {
    "44d88612fea8a8f36de82e1278abb02f": {
        "name": "EICAR Test File",
        "type": "Test Virus",
        "description": {
            "th": "‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏°‡∏±‡∏•‡πÅ‡∏ß‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡∏£‡∏±‡∏™",
            "en": "Standard test file used to check antivirus functionality"
        }
    },
    "abcdef1234567890abcdef1234567890": {
        "name": "Trojan.Generic",
        "type": "Trojan",
        "description": {
            "th": "‡πÇ‡∏ó‡∏£‡∏à‡∏±‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏Ç‡πÇ‡∏°‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏Å‡∏•",
            "en": "Generic Trojan that may steal data or open remote access"
        }
    }
}

# üü¶ ‡∏†‡∏≤‡∏©‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
language = "en"

# üü® ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
def t(thai, english):
    return thai if language == "th" else english

# üü® ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤
lang_choice = input("üåê Choose language (th = ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢, en = English) [default = en]: ").strip().lower()
if lang_choice == "th":
    language = "th"
elif lang_choice == "en" or lang_choice == "":
    language = "en"
else:
    print("‚ö†Ô∏è Invalid choice. Defaulting to English")
    language = "en"

# üîê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì hash ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå
def get_file_hash(file_path):
    hasher = hashlib.md5()
    try:
        with open(file_path, 'rb') as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hasher.update(chunk)
        return hasher.hexdigest()
    except:
        return None

# üîç ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
def scan_file(file_path):
    print(f"\nüìÅ {t('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô', 'Scanning')}: {file_path}")
    
    file_hash = get_file_hash(file_path)
    file_type, _ = mimetypes.guess_type(file_path)
    file_size = os.path.getsize(file_path)

    if not file_hash:
        print(f"‚ö†Ô∏è {t('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ', 'Could not read file')}")
        return

    print(f"  üîπ {t('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå', 'File type')}: {file_type or t('‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', 'Unknown')}")
    print(f"  üî∏ {t('‡∏Ç‡∏ô‡∏≤‡∏î', 'Size')}: {file_size / 1024:.2f} KB")
    print(f"  üî∏ MD5: {file_hash}")

    if file_hash in known_malware:
        data = known_malware[file_hash]
        print(f"  ‚ùå {t('‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏°‡∏±‡∏•‡πÅ‡∏ß‡∏£‡πå!', 'Malware Detected!')}")
        print(f"     ‚û§ {t('‡∏ä‡∏∑‡πà‡∏≠:', 'Name:')} {data['name']}")
        print(f"     ‚û§ {t('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:', 'Type:')} {data['type']}")
        print(f"     ‚û§ {t('‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:', 'Description:')} {data['description'][language]}")
    else:
        print(f"  ‚úÖ {t('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏±‡∏¢‡∏Ñ‡∏∏‡∏Å‡∏Ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å', 'No known threats found')}")
        if file_type is None:
            print(f"     ‚ÑπÔ∏è {t('‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ', 'Warning: File type is unknown')}")
        elif file_type in ['application/x-msdownload', 'application/octet-stream']:
            print(f"     ‚ÑπÔ∏è {t('‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏£‡∏∑‡∏≠ binary', 'Warning: This might be a binary/executable file')}")
        elif file_size > 10 * 1024 * 1024:
            print(f"     ‚ÑπÔ∏è {t('‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡∏ã‡πà‡∏≠‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢', 'Warning: File is very large ‚Äî may hide malicious code')}")
        else:
            print(f"     ‚û§ {t('‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏°‡∏±‡∏•‡πÅ‡∏ß‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏Å‡∏ï‡∏¥', 'Reason: No malware signature and file looks normal')}")

# üóúÔ∏è ‡∏™‡πÅ‡∏Å‡∏ô‡πÑ‡∏ü‡∏•‡πå ZIP
def scan_zip(file_path):
    try:
        with zipfile.ZipFile(file_path, 'r') as zip_ref:
            extract_path = "__temp_zip_extract__"
            zip_ref.extractall(extract_path)
            print(f"\nüì¶ {t('‡πÅ‡∏ï‡∏Å zip', 'Extracting zip')}: {file_path}")
            for root, _, files in os.walk(extract_path):
                for name in files:
                    scan_file(os.path.join(root, name))
            import shutil
            shutil.rmtree(extract_path)
    except:
        print(f"‚ö†Ô∏è {t('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå zip ‡πÑ‡∏î‡πâ', 'Cannot extract zip file')}")

# üìÅ ‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
def scan_folder(folder_path):
    for root, _, files in os.walk(folder_path):
        for name in files:
            file_path = os.path.join(root, name)
            if file_path.endswith(".zip"):
                scan_zip(file_path)
            else:
                scan_file(file_path)

# üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    print("üõ°Ô∏è  Simple Malware Scanner")
    print(f"üïí {t('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô', 'Scan started at')}: {datetime.datetime.now()}\n")
    
    target = input(f"{t('üìÇ ‡∏û‡∏¥‡∏°‡∏û‡πå path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô', 'Enter path of file or folder to scan')}: ").strip()

    if os.path.isfile(target):
        if target.endswith(".zip"):
            scan_zip(target)
        else:
            scan_file(target)
    elif os.path.isdir(target):
        scan_folder(target)
    else:
        print(f"‚ùå {t('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏', 'File or folder not found')}")
